// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: app/user/cmd/rpc/pb/user.proto

package user_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UcService_UserInfo_FullMethodName = "/app.user.cmd.rpc.pb.UcService/UserInfo"
)

// UcServiceClient is the client API for UcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UcServiceClient interface {
	UserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type ucServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUcServiceClient(cc grpc.ClientConnInterface) UcServiceClient {
	return &ucServiceClient{cc}
}

func (c *ucServiceClient) UserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UcService_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UcServiceServer is the server API for UcService service.
// All implementations must embed UnimplementedUcServiceServer
// for forward compatibility
type UcServiceServer interface {
	UserInfo(context.Context, *UserRequest) (*UserResponse, error)
	mustEmbedUnimplementedUcServiceServer()
}

// UnimplementedUcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUcServiceServer struct {
}

func (UnimplementedUcServiceServer) UserInfo(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUcServiceServer) mustEmbedUnimplementedUcServiceServer() {}

// UnsafeUcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UcServiceServer will
// result in compilation errors.
type UnsafeUcServiceServer interface {
	mustEmbedUnimplementedUcServiceServer()
}

func RegisterUcServiceServer(s grpc.ServiceRegistrar, srv UcServiceServer) {
	s.RegisterService(&UcService_ServiceDesc, srv)
}

func _UcService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcServiceServer).UserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UcService_ServiceDesc is the grpc.ServiceDesc for UcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.cmd.rpc.pb.UcService",
	HandlerType: (*UcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _UcService_UserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/user/cmd/rpc/pb/user.proto",
}
